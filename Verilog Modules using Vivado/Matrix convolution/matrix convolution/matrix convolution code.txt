module mux_g #(parameter In_d_W=16*8, S_W=4)( 
input [In_d_W-1:0] A, 
input [S_W-1:0] S,
output [(In_d_W/(2**S_W))-1:0] Y 
);
parameter Out_d_W=In_d_W/(2**S_W);
wire [Out_d_W-1:0] W [0:(2**S_W)-1];
generate
genvar i;
//assign Y=A[S];
for(i=0; i<(2**S_W); i=i+1)
begin
    assign W[i]=A[ (i*Out_d_W)+Out_d_W-1 : i*Out_d_W ];
end
endgenerate

assign Y=W[S];

endmodule














module conv #(parameter In_d_W=8, R=3, C=3, In_Add_W=4, Timeperiod=10)(
    input clk,clk_en,rst,clr,en_wr,en_rd,wr,en_MAC,en_MAC_out,   //wr=1 (Write), wr=0 (Read)
    input [(C*R*In_d_W)-1:0] A, //[71:0] A as 9*8=72
    input [(C*R*In_d_W)-1:0] B, //[71:0] B as 9*8=72
    output [((2*In_d_W)+2)-1:0] Y
    );
    
    wire [((2**In_Add_W)*In_d_W)-1:0] Wrow;
    wire [((2**In_Add_W)*In_d_W)-1:0] Wcol;
    wire [In_Add_W-1:0] addr_com;
    wire [In_d_W-1:0] din_r,din_c;
    
    generate
    genvar j;
    for(j=0;j<((2**In_Add_W)*In_d_W);j=j+In_d_W)
    begin
        if(j<R*C*In_d_W)
        begin
            assign Wrow[j+In_d_W-1:j]=A[j+In_d_W-1:j];
            assign Wcol[j+In_d_W-1:j]=B[j+In_d_W-1:j];
        end
                
        else if(j>=R*C*In_d_W)
        begin
            assign Wrow[j+In_d_W-1:j]='d0;
            assign Wcol[j+In_d_W-1:j]='d0;
        end
    end
    endgenerate
    
    c_counter_binary_0 common(
      .CLK(clk),    // input wire CLK
      .CE(clk_en),      // input wire CE
      .SCLR(clr),  // input wire SCLR
      .Q(addr_com)        // output wire [3 : 0] Q
    );
    
    mux_g #((In_d_W*(2**In_Add_W)),In_Add_W) MUXrow(.A(Wrow),.S(addr_com),.Y(din_r));
    
    mux_g #((In_d_W*(2**In_Add_W)),In_Add_W) MUXcol(.A(Wcol),.S(addr_com),.Y(din_c));   
    
    matrix_multiplier #(In_d_W,In_Add_W,R*C,Timeperiod) DUT(.clk(clk),.rst(rst),.clr(clr),.ena_r(en_wr),.ena_c(en_wr),.enb_r(en_rd),
    .enb_c(en_rd),.wea_r(wr),.wea_c(wr),.din_r(din_r),.din_c(din_c),.addra_r(addr_com),.addrb_r(addr_com),.addra_c(addr_com),
    .addrb_c(addr_com),.en_MAC(en_MAC),.en_MAC_out(en_MAC_out),.y(Y));
   
endmodule














module conv_tb();
parameter In_d_W=8, R=3, C=3, In_Add_W=4, Timeperiod=10;
reg clk,clk_en,rst,clr,en_wr,en_rd,wr,en_MAC,en_MAC_out;
reg [(C*R*In_d_W)-1:0] A,B;
wire [(2*In_d_W)+1:0] Y;

conv #(In_d_W,R,C,In_Add_W,Timeperiod) convolution(.clk(clk),.clk_en(clk_en),.rst(rst),.clr(clr),.en_wr(en_wr),.en_rd(en_rd),
.wr(wr),.en_MAC(en_MAC),.en_MAC_out(en_MAC_out),.A(A),.B(B),.Y(Y));

always #5 clk=~clk;

initial begin
clk=0; clk_en=0; rst=0; clr=1;
#10 rst=1; clr=1; A=72'h0A0C09070206040F01; B=72'h0907020106040C0A0F;
#10 clr=0; en_wr=0; en_rd=0; wr=0; en_MAC=0; en_MAC_out=0;
#10 clk_en=1; en_wr=1; en_rd=0; wr=1; en_MAC=0; en_MAC_out=0;           // Write State
#90 clr=1; clk_en=0; en_wr=0; en_rd=0; wr=0; en_MAC=0; en_MAC_out=0;    // Clear State
#10 clr=0; clk_en=1; en_wr=0; en_rd=1; wr=0; en_MAC=1; en_MAC_out=0;    // Read State
#90 clr=0; clk_en=0; en_wr=0; en_rd=0; wr=0; en_MAC=1; en_MAC_out=0;    // Wait state
#10 en_MAC=0;                                                       // All Zero State
#10 en_MAC_out=1; 
#20 en_MAC_out=0;
#10 $finish;
end
endmodule


