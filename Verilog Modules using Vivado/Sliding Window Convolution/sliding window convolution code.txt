Sliding Window Convolution module:-


module slide_window_conv #(parameter In_d_W=8, In_Add_W=4, R_N=5, C_N=5, R_F=3, C_F=3, P=0, S=1, Timeperiod=10) (
    input clk,clk_en,rst,clr,en_wr,en_rd,wr,en_MAC,en_MAC_out,   //wr=1 (Write), wr=0 (Read)
    input [(C_N*R_N*In_d_W)-1:0] N, // [199:0] N
    input [(C_F*R_F*In_d_W)-1:0] F, // [71:0] F
    output [(((2*In_d_W)+2)*(((R_N+(2*P)-R_F)/S)+1)*(((C_N+(2*P)-C_F)/S)+1))-1:0] Y   // [161:0] Y
    );
    parameter R_O=(((R_N+(2*P)-R_F)/S)+1); //3
    parameter C_O=(((C_N+(2*P)-C_F)/S)+1); //3
    parameter Out_d_W=((2*In_d_W)+2); //18
    //wire [(In_d_W*R_N)-1:0] X [0:(C_N-1)];  // [39:0] X [0:4]
    wire [(In_d_W*R_O)-1:0] Z [0:((R_O*C_N)-1)];  // [23:0] Z [0:14]
    wire [(In_d_W*R_F*C_F)-1:0] A [0:(R_O*C_O)-1];  // [71:0] A [0:8]
    wire [Out_d_W-1:0] W [0:(R_O*C_O)-1];  // [17:0] W [0:8]

    /*
    generate
    genvar k;
    for(k=0;k<C_N;k=k+1) //k<5
    begin
        assign X[k]=N[((k*R_N*In_d_W)+(R_N*In_d_W)-1):(k*R_N*In_d_W)]; // N[(k*40)+40-1 : k*40]
    end
    endgenerate
    
    
    generate
    genvar i,j,m;
    for(i=0;i<C_N;i=i+1)  //i<5
    begin
        for(j=(R_O*i) ; j<(R_O+(R_O*i)) ; j=j+1) // j=3*i;  j<3+3i; j=j+1
        begin
                for(m=(In_d_W*S*(j%R_O)) ; m<((R_F*In_d_W)+(In_d_W*S*(j%R_O))); 
                m=m+(In_d_W*R_F)) // m=8*(j%3)*S, m<(8*3)+8*S*(j%3); m=m+(8*3)
                begin
                    assign Z[j]=X[i][(m+(In_d_W*R_F))-1:m]; //  [(m+(8*3)-1):m]
                end
        end    
    end
    endgenerate
    */
    
    generate
    genvar i,j;
    for(i=0;i<C_N;i=i+1)  //i<5
        begin
            for(j=(R_O*i) ; j<(R_O+(R_O*i)) ; j=j+1) // j=3*i;  j<3+3i; j=j+1
            begin
                assign Z[j] = N[((R_O*In_d_W)+(In_d_W*(j+(i*(R_F-1))))-1):(In_d_W*(j+(i*(R_F-1))))]; //  N[(3*8)+(8*(j+(i*2)))-1 : 8*(j+(i*2))]
            end    
        end
    endgenerate
    
    
    generate 
    genvar n,p;
    for(n=0 ; n<(R_O*C_O) ; n=n+1) // n<9
    begin
        for(p=0; p<(R_F*C_F*In_d_W); p=p+(R_F*In_d_W)) // p<72; p=p+24
        begin
            assign A[n][(p+(R_F*In_d_W)-1):p]=Z[n+(R_O*p/(R_F*In_d_W))]; //  A[n][p+24-1:p]=Z[n+(3*p/24)] 
        end
    end
    endgenerate
    
    
    generate
    genvar t;
    for(t=0; t<(R_O*C_O); t=t+1) //t<9
    begin
        assign Y[(Out_d_W+(t*Out_d_W))-1 :(t*Out_d_W)] = W[t]; // Y[18+(t*18)-1:(t*18)]=W[t] 
    end
    endgenerate
    
        
    generate
    genvar r;
    for(r=0; r<(R_O*C_O); r=r+1)    // r<9
    begin
        conv #(In_d_W, R_F, C_F, In_Add_W, Timeperiod) CV 
        (.clk(clk),.clk_en(clk_en),.rst(rst),.clr(clr),.en_wr(en_wr),.en_rd(en_rd),.wr(wr),.en_MAC(en_MAC),
        .en_MAC_out(en_MAC_out),.A(A[r]),.B(F),.Y(W[r]));
    end
    endgenerate
 
    
endmodule



Convolution Module:-



module conv #(parameter In_d_W=8, R=3, C=3, In_Add_W=4, Timeperiod=10)(
    input clk,clk_en,rst,clr,en_wr,en_rd,wr,en_MAC,en_MAC_out,   //wr=1 (Write), wr=0 (Read)
    input [(C*R*In_d_W)-1:0] A,
    input [(C*R*In_d_W)-1:0] B,
    output [(2*In_d_W)+1:0] Y
    );
    
    wire [In_d_W-1:0] W1 [0:15];
    wire [In_d_W-1:0] W2 [0:15];
    wire [In_Add_W-1:0] addr_com;
    wire [In_d_W-1:0] din_r,din_c;
    
    generate
    genvar i;
    for(i=0; i<R*C*In_d_W; i=i+In_d_W)
    begin
        assign W1[i/In_d_W]=A[i+In_d_W-1:i];
        assign W2[i/In_d_W]=B[i+In_d_W-1:i];
    end
    endgenerate
    
    c_counter_binary_0 common(
      .CLK(clk),    // input wire CLK
      .CE(clk_en),      // input wire CE
      .SCLR(clr),  // input wire SCLR
      .Q(addr_com)        // output wire [3 : 0] Q
    );
    
    mux_8bit_16x1 #(In_d_W, R*C) for_W1(.A0(W1[0]),.A1(W1[1]),.A2(W1[2]),.A3(W1[3]),.A4(W1[4]),.A5(W1[5]),.A6(W1[6]),.A7(W1[7]),.A8(W1[8]),
    .A9(W1[9]),.A10(W1[10]),.A11(W1[11]),.A12(W1[12]),.A13(W1[13]),.A14(W1[14]),.A15(W1[15]),.S(addr_com),.Y(din_r));
    
    mux_8bit_16x1 #(In_d_W, R*C) for_W2(.A0(W2[0]),.A1(W2[1]),.A2(W2[2]),.A3(W2[3]),.A4(W2[4]),.A5(W2[5]),.A6(W2[6]),.A7(W2[7]),.A8(W2[8]),
    .A9(W2[9]),.A10(W2[10]),.A11(W2[11]),.A12(W2[12]),.A13(W2[13]),.A14(W2[14]),.A15(W2[15]),.S(addr_com),.Y(din_c));
        
    matrix_multiplier #(In_d_W,In_Add_W,R*C,Timeperiod) DUT(.clk(clk),.rst(rst),.clr(clr),.ena_r(en_wr),.ena_c(en_wr),.enb_r(en_rd),
    .enb_c(en_rd),.wea_r(wr),.wea_c(wr),.web_r(wr),.web_c(wr),.din_r(din_r),.din_c(din_c),.addra_r(addr_com),.addrb_r(addr_com),
    .addra_c(addr_com),.addrb_c(addr_com),.en_MAC(en_MAC),.en_MAC_out(en_MAC_out),.y(Y));

    
endmodule




Sliding Window Convolution TB1(Unsigned):-



module slide_tb();
    parameter In_d_W=8, R_N=5, C_N=5, R_F=3, C_F=3, P=0, S=1, Timeperiod=10, In_Add_W=4;
    parameter R_O=(((R_N+(2*P)-R_F)/S)+1); //3
    parameter C_O=(((C_N+(2*P)-C_F)/S)+1); //3
    parameter Out_d_W=((2*In_d_W)+2); //18
    reg clk,clk_en,rst,clr,en_wr,en_rd,wr,en_MAC,en_MAC_out;
    reg [(C_N*R_N*In_d_W)-1 : 0] N;
    reg [(C_F*R_F*In_d_W)-1 : 0] F;
    wire [(Out_d_W*R_O*C_O)-1 : 0] Y;

    slide_window_conv #(In_d_W, In_Add_W, R_N, C_N, R_F, C_F, P, S, Timeperiod) CVN
    (.clk(clk),.clk_en(clk_en),.rst(rst),.clr(clr),.en_wr(en_wr),.en_rd(en_rd),.wr(wr),.en_MAC(en_MAC),
    .en_MAC_out(en_MAC_out),.N(N),.F(F),.Y(Y));
    
    always #5 clk=~clk;
    
    initial begin
    clk=0; clk_en=0; rst=0; clr=1;
    #10 rst=1; clr=1; F=72'h0907020106040C0A0F; N=200'h6C6B676A62646F2A2C29272526242F210A0C09070206040F01;
    #10 clr=0; en_wr=0; en_rd=0; wr=0; en_MAC=0; en_MAC_out=0;
    #10 clk_en=1; en_wr=1; en_rd=0; wr=1; en_MAC=0; en_MAC_out=0;           // Write State
    #90 clr=1; clk_en=0; en_wr=0; en_rd=0; wr=0; en_MAC=0; en_MAC_out=0;    // Clear State
    #10 clr=0; clk_en=1; en_wr=0; en_rd=1; wr=0; en_MAC=1; en_MAC_out=0;    // Read State
    #90 clr=0; clk_en=0; en_wr=0; en_rd=0; wr=0; en_MAC=1; en_MAC_out=0;    // Wait state
    #10 en_MAC=0;                                                           // All Zero State
    #10 en_MAC_out=1;                                                       // Output State
    #20 en_MAC_out=0;   
    #10 $finish;
    end
      /*
      o/p(b) o/p(h)    
        00    0
      0001    1
      0000    0
      1010    a
      1101    d
      0000    0
      0011    3
      1011    b
      0101    5
      1100    c
      0000    0
      1111    f
      0001    1
      0000    0
      0000    0
      0010    2
      1100    c
      1000    8
      1000    8
      0000    0
      1000    8
      0111    7
      0101    5
      0000    0
      0001    1
      1000    8
      0011    3
      0100    4
      0000    0
      0011    3
      1100    c
      1011    b
      0000    0
      0001    1
      0001    1
      1001    9
      1000    8
      0000    0
      0011    3
      1110    e
      0011    3
      */
endmodule



Sliding Window Convolution TB(signed):-




module slide_tb();
    parameter In_d_W=8, R_N=5, C_N=5, R_F=3, C_F=3, P=0, S=1, Timeperiod=10, In_Add_W=4;
    parameter R_O=(((R_N+(2*P)-R_F)/S)+1); //3
    parameter C_O=(((C_N+(2*P)-C_F)/S)+1); //3
    parameter Out_d_W=((2*In_d_W)+2); //18
    reg clk,clk_en,rst,clr,en_wr,en_rd,wr,en_MAC,en_MAC_out;
    reg [(C_N*R_N*In_d_W)-1 : 0] N;
    reg [(C_F*R_F*In_d_W)-1 : 0] F;
    wire [(Out_d_W*R_O*C_O)-1 : 0] Y;

    slide_window_conv #(In_d_W, In_Add_W, R_N, C_N, R_F, C_F, P, S, Timeperiod) CVN
    (.clk(clk),.clk_en(clk_en),.rst(rst),.clr(clr),.en_wr(en_wr),.en_rd(en_rd),.wr(wr),.en_MAC(en_MAC),
    .en_MAC_out(en_MAC_out),.N(N),.F(F),.Y(Y));
    
    always #5 clk=~clk;
    
    initial begin
    clk=0; clk_en=0; rst=0; clr=1;
    #10 rst=1; clr=1; F=72'hF6000AF6000AF6000A; N=200'h6C6B676A62646F2A2C29272526242F210A0C09070206040F01;
    #10 clr=0; en_wr=0; en_rd=0; wr=0; en_MAC=0; en_MAC_out=0;
    #10 clk_en=1; en_wr=1; en_rd=0; wr=1; en_MAC=0; en_MAC_out=0;           // Write State
    #90 clr=1; clk_en=0; en_wr=0; en_rd=0; wr=0; en_MAC=0; en_MAC_out=0;    // Clear State
    #10 clr=0; clk_en=1; en_wr=0; en_rd=1; wr=0; en_MAC=1; en_MAC_out=0;    // Read State
    #90 clr=0; clk_en=0; en_wr=0; en_rd=0; wr=0; en_MAC=1; en_MAC_out=0;    // Wait state
    #10 en_MAC=0;                                                           // All Zero State
    #10 en_MAC_out=1;                                                       // Output State
    #20 en_MAC_out=0;   
    #10 $finish;
    end
      /*
      o/p(d) 
      -200  70  10
      -800 -690 30
      -640 -690 30
      
      
      o/p(h)  
      3FF38 00046 0000A
      3FCE0 3FD4E 0001E
      3FD80 3FD4E 0001E
      
      o/p(161:0)
      3fd80ff538001eff383fd4e0007bff3800118000a
      
      */
endmodule
